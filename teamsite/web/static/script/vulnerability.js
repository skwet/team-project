// Vulnerability scanner results processing


let scanResultsInput = `
            - Nikto v2.5.0
            ---------------------------------------------------------------------------
            + Multiple IPs found: 3.125.102.39, 3.124.142.205, 3.125.223.134, 18.158.249.75, 3.125.209.94, 18.192.31.165
            + Target IP:          3.125.102.39
            + Target Hostname:    413d-92-253-212-238.ngrok-free.app
            + Target Port:        443
            ---------------------------------------------------------------------------
            + SSL Info:        Subject:  /CN=*.ngrok-free.app
                               Ciphers:  TLS_AES_128_GCM_SHA256
                               Issuer:   /C=US/O=Let's Encrypt/CN=R3
            + Start Time:         2024-01-02 15:06:33 (GMT2)
            ---------------------------------------------------------------------------
            + Server: No banner retrieved
            + /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
            + /: Uncommon header 'ngrok-error-code' found, with contents: ERR_NGROK_3200.
            + /: Uncommon header 'ngrok-trace-id' found, with contents: 30153f2b5caf597de431fd805f6eb4a5.
            + /: The site uses TLS and the Strict-Transport-Security HTTP header is not defined. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
            + /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/
            + No CGI Directories found (use '-C all' to force check all possible dirs)
`;

const scanResults = document.querySelector('.vulnerability-results');

function processTextResultText(inputText) {
    const header = "<h2 >Report Summary</h2>";
    
    const urlRegex = /(https?:\/\/[^\s]+)/g;

    const linkify = (text) => text.replace(urlRegex, function(url) {
        return '<br>&emsp;<a href="' + url + '" target="_blank" class="highlighted-link">' + url + '</a>';
    });
    
    let text = inputText;

    // Replace + /: with bullet point, --- and + with nothing, newlines with <br>, and - with a nothing
    text = text.replace(/\+ \/:/g, '&bull;').replace(/---|\+/g, '').replace(/(\r\n|\n|\r)/gm, '<br>').replace(/-/, '');
    text = text.replace(/(SSL Info:)/g, '$1<br>');
    text = `<span class="scan-results-main-section">${text}</span>`;
   
    text = linkify(text);

    return header + text;
}

const vulnerabilityResDiv = document.createElement('div');
vulnerabilityResDiv.id = 'report-text';
vulnerabilityResDiv.innerHTML = processTextResultText(scanResultsInput);
scanResults.prepend(vulnerabilityResDiv);


const button = document.querySelector('.scan-results-output-bt');
button.addEventListener('click', function() {
    const reportText = document.getElementById('report-text').innerText;
    navigator.clipboard.writeText(reportText)
        .then(() => {
            console.log('Report copied to clipboard');
        })
        .catch(err => {
            console.error('Could not copy report: ', err);
        });
});





